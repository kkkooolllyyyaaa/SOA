openapi: "3.0.2"

info:
  title: Lab API
  version: "1.0"

servers:
  - url: http://localhost:8080
    description: local

paths:
  /api/v1/lab:
    post:
      description: |
        Request to create new lab work
      summary: |
        Request to create new lab work
      tags:
        - Lab
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabWorkUpdateDto'
      responses:
        '200':
          description: |
            Request processed successfully, body contains created lab
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/LabWorkResponseDto'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  /api/v1/lab/{id}:
    get:
      description: |
        Request to get single lab by id
      summary: |
        Request to get single lab by id
      tags:
        - Lab
      parameters:
        - $ref: '#/components/parameters/LabWorkIdPath'
      responses:
        '200':
          description: |
            Request processed successfully, body contains found lab
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/LabWorkResponseDto'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    put:
      description: |
        Request to update lab work
      summary: |
        Request to update lab work
      tags:
        - Lab
      parameters:
        - $ref: '#/components/parameters/LabWorkIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabWorkUpdateDto'
      responses:
        '200':
          description: |
            Request processed successfully, body contains updated lab
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/LabWorkResponseDto'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    delete:
      description: |
        Request to delete lab work
      summary: |
        Request to delete lab work
      tags:
        - Lab
      parameters:
        - $ref: '#/components/parameters/LabWorkIdPath'
      responses:
        '204':
          description: |
            Request processed successfully, lab was deleted
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  /api/v1/lab/searches:
    post:
      description: |
        Request to create search
      summary: |
        Request to create search
      tags:
        - Lab
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabWorkSearch'
      responses:
        '200':
          description: |
            Request processed successfully, body contains found labs
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/LabWorksListResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  /api/v1/lab/minimal-point/sum:
    get:
      description: |
        Request to get sum of minimalPoint
      summary: |
        Request to get sum of minimalPoint
      tags:
        - Operations
      operationId:
        getSumOfLabsMinimalPoint
      responses:
        '200':
          description: |
            Request processed successfully, body contains result
          content:
            application/json:
              schema:
                description: Calculated sum of minimal point
                type: integer
                format: int64
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  /api/v1/lab/minimal-point:
    get:
      description: |
        Request to get random lab by max minimalPoint value
      summary: |
        Request to get random lab by max minimalPoint value
      tags:
        - Operations
      operationId:
        getRandomLabWithMaximumMinimalPointValue
      responses:
        '200':
          description: |
            Request processed successfully, body contains found lab
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/LabWorkResponseDto'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

components:
  schemas:
    LabWorkSearch:
      type: object
      properties:
        sort_by:
          type: array
          items:
            $ref: '#/components/schemas/LabWorkPropertyName'
        filters:
          type: array
          items:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/LabWorkPropertyName'
              filter_value:
                type: string
                example: Vas*
            required:
              - name
              - filter_value
      required:
        - sort_by
        - filters

    LabWorkPropertyName:
      type: string
      example: name
      enum:
        - id
        - name
        - coordinates.x
        - coordinates.y
        - creation_date
        - minimal_point
        - difficulty
        - author.name
        - author.birthday
        - author.eye_color
        - author.hair_color
        - author.nationality
        - author.location

    LabWorkUpdateDto:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        minimal_point:
          type: integer
          minimum: 1
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        author:
          $ref: '#/components/schemas/Person'
      required:
        - name
        - coordinates
        - difficulty

    LabWorksListResponse:
      type: array
      items:
        $ref: '#/components/schemas/LabWorkResponseDto'

    LabWorkResponseDto:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/LabWorkId'
        name:
          type: string
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creation_date:
          type: string
          format: date-time
        minimal_point:
          type: integer
          minimum: 1
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        author:
          $ref: '#/components/schemas/Person'
      required:
        - id
        - name
        - coordinates
        - creation_date
        - difficulty


    Coordinates:
      type: object
      properties:
        x:
          type: integer
          format: int64
        y:
          type: number
          format: double
          maximum: 395
      required:
        - y


    Person:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        birthday:
          type: string
          format: date-time
        eye_color:
          $ref: '#/components/schemas/Color'
        hair_color:
          $ref: '#/components/schemas/Color'
        nationality:
          $ref: '#/components/schemas/Country'
        location:
          $ref: '#/components/schemas/Location'
      required:
        - name
        - birthday
        - eye_color
        - hair_color
        - nationality
        - location


    Location:
      type: object
      properties:
        x:
          type: number
          format: float
        y:
          type: number
          format: double
        name:
          type: string
      required:
        - x
        - y
        - name


    Difficulty:
      description: Lab work difficulty
      type: string
      enum:
        - NORMAL
        - INSANE
        - TERRIBLE

    Color:
      type: string
      enum:
        - GREEN
        - BLACK
        - YELLOW
        - ORANGE
        - WHITE
        - BROWN

    Country:
      type: string
      enum:
        - GERMANY
        - INDIA
        - ITALY
        - THAILAND

    LabWorkId:
      description: Unique identifier of lab work
      type: integer
      format: int64
      minimum: 1

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  parameters:
    Page:
      name: page
      in: query
      required: true
      description: |
        Page number of pagination
      schema:
        type: integer
        minimum: 0

    PageSize:
      name: page_size
      in: query
      required: true
      description: |
        Page size of pagination
      schema:
        type: integer
        minimum: 1
        maximum: 100

    LabWorkIdPath:
      description: Unique identifier of lab work
      in: path
      name: id
      schema:
        type: integer
        format: int64
        minimum: 1
      required: true

  responses:
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: INTERNAL_SERVER_ERROR
              message:
                type: string
                example: Unable to process request
            required:
              - code
              - message

    '400':
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: ILLEGAL_ARGUMENT_PROVIDED
              message:
                type: string
                example: Identifier should be number
            required:
              - code
              - message

    '404':
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: LAB_NOT_FOUND
              message:
                type: string
                example: Lab with id=1 not found
            required:
              - code
              - message
